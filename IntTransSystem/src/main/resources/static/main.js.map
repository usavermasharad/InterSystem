{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/edge/edge.component.css","webpack:///./src/app/edge/edge.component.html","webpack:///./src/app/edge/edge.component.ts","webpack:///./src/app/error/error.component.css","webpack:///./src/app/error/error.component.html","webpack:///./src/app/error/error.component.ts","webpack:///./src/app/list-edges/list-edges.component.css","webpack:///./src/app/list-edges/list-edges.component.html","webpack:///./src/app/list-edges/list-edges.component.ts","webpack:///./src/app/list-traffic/list-traffic.component.css","webpack:///./src/app/list-traffic/list-traffic.component.html","webpack:///./src/app/list-traffic/list-traffic.component.ts","webpack:///./src/app/list-vertice/list-vertice.component.css","webpack:///./src/app/list-vertice/list-vertice.component.html","webpack:///./src/app/list-vertice/list-vertice.component.ts","webpack:///./src/app/menu/menu.component.css","webpack:///./src/app/menu/menu.component.html","webpack:///./src/app/menu/menu.component.ts","webpack:///./src/app/service/data/edges-data.service.ts","webpack:///./src/app/service/data/shortestpath.service.ts","webpack:///./src/app/service/data/traffic-data.service.ts","webpack:///./src/app/service/data/vertice-data.service.ts","webpack:///./src/app/shortest/shortest.component.css","webpack:///./src/app/shortest/shortest.component.html","webpack:///./src/app/shortest/shortest.component.ts","webpack:///./src/app/shortestpath/shortestpath.component.css","webpack:///./src/app/shortestpath/shortestpath.component.html","webpack:///./src/app/shortestpath/shortestpath.component.ts","webpack:///./src/app/traffic/traffic.component.css","webpack:///./src/app/traffic/traffic.component.html","webpack:///./src/app/traffic/traffic.component.ts","webpack:///./src/app/vertice/vertice.component.css","webpack:///./src/app/vertice/vertice.component.html","webpack:///./src/app/vertice/vertice.component.ts","webpack:///./src/app/welcome/welcome.component.css","webpack:///./src/app/welcome/welcome.component.html","webpack:///./src/app/welcome/welcome.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { WelcomeComponent } from './welcome/welcome.component';\nimport { VerticeComponent } from './vertice/vertice.component';\nimport { EdgeComponent } from './edge/edge.component';\nimport { TrafficComponent } from './traffic/traffic.component';\nimport { ShortestpathComponent } from './shortestpath/shortestpath.component';\nimport { ListEdgesComponent } from './list-edges/list-edges.component';\nimport { ErrorComponent } from './error/error.component';\nimport { ListTrafficComponent } from './list-traffic/list-traffic.component';\nimport { ListVerticeComponent } from './list-vertice/list-vertice.component';\nimport { ShortestComponent } from './shortest/shortest.component';\n\nconst routes: Routes = [\n  {path:'',component:WelcomeComponent},\n  {path:'welcome',component:WelcomeComponent},\n  //{path:'vertice',component:VerticeComponent},\n  {path:'edges/:edgeId',component:EdgeComponent},\n  {path:'list-edges',component:ListEdgesComponent},\n  {path:'traffice/:routeId',component:TrafficComponent},\n  {path:'list-traffice',component:ListTrafficComponent},\n  {path:'list-vertice',component:ListVerticeComponent},\n  {path:'vertices/:id',component:VerticeComponent},\n  \n  \n  {path:'shortest',component:ShortestComponent},\n\n  { path: '**', component: ErrorComponent }\n\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<app-menu></app-menu>\\n<div class=\\\"container\\\">\\n\\n  <router-outlet></router-outlet> <br>\\n</div>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'IntTransWeb';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MenuComponent } from './menu/menu.component';\nimport { WelcomeComponent } from './welcome/welcome.component';\nimport { VerticeComponent } from './vertice/vertice.component';\nimport { EdgeComponent } from './edge/edge.component';\nimport { TrafficComponent } from './traffic/traffic.component';\nimport { ShortestpathComponent } from './shortestpath/shortestpath.component';\nimport { ErrorComponent } from './error/error.component';\nimport { ListEdgesComponent } from './list-edges/list-edges.component';\nimport { FormsModule } from \"@angular/forms\";\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ListTrafficComponent } from './list-traffic/list-traffic.component';\nimport { ListVerticeComponent } from './list-vertice/list-vertice.component';\nimport { ShortestComponent } from './shortest/shortest.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MenuComponent,\n    WelcomeComponent,\n    VerticeComponent,\n    EdgeComponent,\n    TrafficComponent,\n    ShortestpathComponent,\n    ErrorComponent,\n    ListEdgesComponent,\n    ListTrafficComponent,\n    ListVerticeComponent,\n    ShortestComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2VkZ2UvZWRnZS5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h1>Todo</h1>\\n<div class=\\\"container\\\">\\n<form #edgeForm=\\\"ngForm\\\"  (ngSubmit)=\\\"!edgeForm.invalid && saveEdge()\\\">\\n<fieldset class=\\\"form-group\\\">\\n<label> Source</label>\\n<input type =\\\"text\\\" class=\\\"form-control\\\" \\n     name=\\\"source\\\" \\n     #source =\\\"ngModel\\\"\\n     required=\\\"required\\\" [(ngModel)]=\\\"edge.source\\\">\\n</fieldset>\\n\\n<fieldset class=\\\"form-group\\\">\\n    <label> Destination</label>\\n    <input type =\\\"text\\\" class=\\\"form-control\\\" \\n         name=\\\"destination\\\" \\n         #destination =\\\"ngModel\\\"\\n         required=\\\"required\\\" [(ngModel)]=\\\"edge.destination\\\">\\n    </fieldset>\\n\\n    <fieldset class=\\\"form-group\\\">\\n        <label> distance</label>\\n        <input type =\\\"text\\\" class=\\\"form-control\\\" \\n             name=\\\"distance\\\" \\n             #distance =\\\"ngModel\\\"\\n             required=\\\"required\\\" [(ngModel)]=\\\"edge.distance\\\">\\n        </fieldset>\\n        <fieldset class=\\\"form-group\\\">\\n            <label> UpdateBy</label>\\n            <input type =\\\"text\\\" class=\\\"form-control\\\" \\n                 name=\\\"updateBy\\\" \\n                 #updateBy =\\\"ngModel\\\"\\n                 required=\\\"required\\\" [(ngModel)]=\\\"edge.updateBy\\\">\\n            </fieldset>\\n\\n            <fieldset class=\\\"form-group\\\">\\n                <label> UpdateTimestamp</label>\\n                <input type =\\\"date\\\" class=\\\"form-control\\\" \\n                     name=\\\"updateTimestamp\\\" \\n                     #updateTimestamp =\\\"ngModel\\\"\\n                     required=\\\"required\\\" [(ngModel)]=\\\"edge.updateTimestamp\\\">\\n                </fieldset>\\n    <button type=\\\"submit\\\" class =\\\"btn btn-success\\\" >Save</button>\\n</form>\\n\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Edges } from '../list-edges/list-edges.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { EdgesDataService } from '../service/data/edges-data.service';\n\n@Component({\n  selector: 'app-edge',\n  templateUrl: './edge.component.html',\n  styleUrls: ['./edge.component.css']\n})\nexport class EdgeComponent implements OnInit {\n\n  edgeId:number\n  edge:Edges\n  constructor(private  route:ActivatedRoute,private router:Router,\n    private edgeDataService :EdgesDataService) { }\n\n  ngOnInit() {\n    this.edgeId =this.route.snapshot.params['edgeId']\n    this.edge= new Edges(0,\"\",\"\",0,\"dummy\",new Date())\n    if(this.edgeId!=-1){\n      this.edgeId =this.route.snapshot.params['edgeId']\n      this.edgeDataService.retrieveEdge(this.edgeId).subscribe(\n      data =>this.edge=data\n    )\n    }\n  }\n\n  saveEdge(){\n  \n\n    if(this.edgeId!=-1){\n      console.log(\"Call to update data:\"+this.edgeId)\n      console.log(\"Call to save data-updateEdge\")\n    //  this.edgeId =this.route.snapshot.params['edgeId']\n    this.edgeDataService.updateEdge(this.edgeId,this.edge).subscribe(\n      data => console.log(data)\n         )\n         this.router.navigate(['list-edges'])\n\n    }\n  else{\n      console.log(\"Call to create data:\"+this.edgeId)\n      console.log(\"Call to save data-createEdge\")\n      \n      this.edgeDataService.createEdge(this.edgeId,this.edge).subscribe(\n        data => console.log(data)\n          \n            )\n            this.router.navigate(['list-edges'])\n  \n    }\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Vycm9yL2Vycm9yLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"{{errorMessage}}\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.css']\n})\nexport class ErrorComponent implements OnInit {\n  errorMessage =\"Am Error Occurred ! Contact Support to Admin at ***-***\"\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xpc3QtZWRnZXMvbGlzdC1lZGdlcy5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h1>My Route's</h1>\\n\\n<div class=\\\"alert alert-success\\\" *ngIf='message'>{{message}}</div>\\n<div class =\\\"container\\\">\\n<table class =\\\"table\\\">\\n \\n  <thead>\\n    <tr>\\n      <th>EdgeId</th>\\n      <th>Source</th>\\n      <th>Destination</th>\\n      <th>Distance</th>\\n      <th>Update By</th>\\n      <th>UpdateTimestamp</th>\\n      <th>Update</th>\\n      <th>Delete</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr *ngFor=\\\"let edge of edges\\\">\\n\\n      <td>{{edge.edgeId}}</td>\\n      <td>{{edge.source}}</td>\\n      <td>{{edge.destination}}</td>\\n      <td>{{edge.distance}}</td>\\n      <td>{{edge.updateBy}}</td>\\n      <td>{{edge.updateTimestamp |date |uppercase}}</td>\\n     \\n      <td> <button (click)=\\\"updateEdge(edge.edgeId)\\\" class =\\\"btn btn-success\\\">Update</button></td>\\n      <td> <button (click)=\\\"deleteEdge(edge.edgeId)\\\" class =\\\"btn btn-warning\\\"> Delete</button></td>\\n    </tr>\\n  </tbody>\\n\\n</table>\\n\\n<button (click)=\\\"addEdges()\\\" class=\\\"btn btn-success\\\">Add</button>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { EdgesDataService } from '../service/data/edges-data.service';\nimport { Router } from '@angular/router';\n\nexport class Edges {\n  constructor(public edgeId: number,\n    public source:string,\n    public destination:string,\n    public distance :number,\n    public updateBy :string,\n    public updateTimestamp:Date){\n\n    }\n}\n\n@Component({\n  selector: 'app-list-edges',\n  templateUrl: './list-edges.component.html',\n  styleUrls: ['./list-edges.component.css']\n})\nexport class ListEdgesComponent implements OnInit {\n\n  edges:Edges[]\n  message:string\n  constructor(private edgesService :EdgesDataService,private router:Router) { }\n\n  ngOnInit() {\n    this.getAllEdges()\n  }\n\n  getAllEdges(){\n    this.edgesService.getAllEdges().subscribe(\n      response=>{\n        console.log(response)\n        this.edges=response\n      }\n    )\n  }\n  updateEdge(edgeId){\n    console.log(edgeId)\n    this.router.navigate(['edges',edgeId])\n  }\n\n  deleteEdge(edgeId){\n    console.log(edgeId)\n    console.log(`delete the edge${edgeId}`)\n    this.edgesService.deleteEdge(edgeId).subscribe(\n      response=>{console.log(response);\n      this.message=\"Delete Successful\"\n      this.getAllEdges(); \n    }\n    )\n  }\n  addEdges(){\n    console.log(\"edgeId\")\n    this.router.navigate(['edges',-1])\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xpc3QtdHJhZmZpYy9saXN0LXRyYWZmaWMuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<h1>My Traffice's</h1>\\n\\n<div class=\\\"alert alert-success\\\" *ngIf='message'>{{message}}</div>\\n<div class =\\\"container\\\">\\n<table class =\\\"table\\\">\\n \\n  <thead>\\n    <tr>\\n      <th>RouteId</th>\\n      <th>Source</th>\\n      <th>Destination</th>\\n      <th>Time Delay</th>\\n      <th>Update By</th>\\n      <th>UpdateTimestamp</th>\\n      <th>Update</th>\\n      <th>Delete</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr *ngFor=\\\"let traffice of traffics\\\">\\n\\n      <td>{{traffice.routeId}}</td>\\n      <td>{{traffice.source}}</td>\\n      <td>{{traffice.destination}}</td>\\n      <td>{{traffice.distance}}</td>\\n      <td>{{traffice.updateBy}}</td>\\n      <td>{{traffice.updateTimestamp |date |uppercase}}</td>\\n     \\n      <td> <button (click)=\\\"updateTraffice(traffice.routeId)\\\" class =\\\"btn btn-success\\\">Update</button></td>\\n      <td> <button (click)=\\\"deleteTraffice(traffice.routeId)\\\" class =\\\"btn btn-warning\\\"> Delete</button></td>\\n    </tr>\\n  </tbody>\\n\\n</table>\\n\\n<button (click)=\\\"addTraffice()\\\" class=\\\"btn btn-success\\\">Add</button>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TrafficDataService } from '../service/data/traffic-data.service';\n\n\nexport class Traffic{\n  constructor(public routeId: number,\n    public source:string,\n    public destination:string,\n    public timeDelay:number,\n    public updateBy :string,\n    public updateTimestamp:Date){\n\n    }\n}\n\n@Component({\n  selector: 'app-list-traffic',\n  templateUrl: './list-traffic.component.html',\n  styleUrls: ['./list-traffic.component.css']\n})\nexport class ListTrafficComponent implements OnInit {\n \n  traffics:Traffic[]\n  message:string\n  constructor(private router:Router,private trafficService:TrafficDataService) { }\n\n  ngOnInit() {\n    console.log(\"Calling\")\n    this.getAllTraffic()\n  }\n  getAllTraffic(){\n    this.trafficService.getAllTraffic().subscribe(\n      response=>{\n        console.log(response)\n        this.traffics=response\n      }\n    )\n\n  }\n\n  updateTraffice(routeId){\n    console.log(routeId)\n    this.router.navigate(['traffice',routeId])\n  }\n\n  deleteTraffice(routeId){\n    console.log(routeId)\n    console.log(`delete the Traffice${routeId}`)\n    this.trafficService.deleteTraffice(routeId).subscribe(\n      response=>{console.log(response);\n      this.message=\"Delete Successful\"\n      this.getAllTraffic(); \n    }\n    )\n  }\n\n  addTraffice(){\n    console.log(\"routeId\")\n    this.router.navigate(['traffice',-1])\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xpc3QtdmVydGljZS9saXN0LXZlcnRpY2UuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<h1>My Vertice's</h1>\\r\\n\\r\\n<div class=\\\"alert alert-success\\\" *ngIf='message'>{{message}}</div>\\r\\n<div class =\\\"container\\\">\\r\\n<table class =\\\"table\\\">\\r\\n \\r\\n  <thead>\\r\\n    <tr>\\r\\n      <th>Vertice Id</th>\\r\\n      <th>Vertice Name</th>\\r\\n     \\r\\n      <th>Update By</th>\\r\\n      <th>UpdateTimestamp</th>\\r\\n      <th>Update</th>\\r\\n      <th>Delete</th>\\r\\n    </tr>\\r\\n  </thead>\\r\\n  <tbody>\\r\\n    <tr *ngFor=\\\"let vertice of vertices\\\">\\r\\n\\r\\n      <td>{{vertice.verticeId}}</td>\\r\\n      <td>{{vertice.verticeName}}</td>\\r\\n      <td>{{vertice.updateBy}}</td>\\r\\n      <td>{{vertice.updateDate |date |uppercase}}</td>\\r\\n     \\r\\n      <td> <button (click)=\\\"updateVertice(vertice.id)\\\" class =\\\"btn btn-success\\\">Update</button></td>\\r\\n      <td> <button (click)=\\\"deleteVertice(vertice.id)\\\" class =\\\"btn btn-warning\\\"> Delete</button></td>\\r\\n    </tr>\\r\\n  </tbody>\\r\\n\\r\\n</table>\\r\\n\\r\\n<button (click)=\\\"addVertice()\\\" class=\\\"btn btn-success\\\">Add</button>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { VerticeDataService } from '../service/data/vertice-data.service';\n\nexport class Vertice{\n  constructor(\n    public id:number,\n    public verticeId: string,\n    public verticeName:string,\n    public updateBy :string,\n    public updateDate: Date){\n    }\n}\n@Component({\n  selector: 'app-list-vertice',\n  templateUrl: './list-vertice.component.html',\n  styleUrls: ['./list-vertice.component.css']\n})\nexport class ListVerticeComponent implements OnInit {\n\n    vertices:Vertice[]\n    message:string\n  constructor(private router:Router,private verticeService:VerticeDataService) { }\n\n  ngOnInit() {\n    this.getAllVertice()\n  }\n\n\n  getAllVertice(){\n    this.verticeService.getAllVertice().subscribe(\n      response=>{\n        console.log(response)\n        this.vertices=response\n      }\n    )\n  }\n\n\n  updateVertice(id){\n    console.log(id)\n    this.router.navigate(['vertices',id])\n  }\n\n\n  deleteVertice(id){\n    console.log(id)\n    console.log(`delete the vertice${id}`)\n    this.verticeService.deleteVertice(id).subscribe(\n      response=>{console.log(response);\n      this.message=\"Delete Successful\"\n      this.getAllVertice(); \n    }\n    )\n  }\n\n  addVertice(){\n    console.log(\"verticeId\")\n    this.router.navigate(['vertices',-1])\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21lbnUvbWVudS5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<header>\\n  <nav class=\\\"navbar navbar-expand-md navbar-dark bg-dark bg-primary mb-4\\\">\\n  <div> <a routerLink=\\\"\\\" class=\\\"navbar-brand\\\">Interstellar Transport System</a></div>\\n  <ul class=\\\"navbar-nav\\\">\\n\\n    <li> <a  routerLink=\\\"/welcome\\\"class=\\\"nav-link\\\" > Home</a></li>\\n    <li> <a  routerLink=\\\"/list-vertice\\\"class=\\\"nav-link\\\" > Vertice</a></li>\\n    <li> <a  routerLink=\\\"/list-edges\\\"class=\\\"nav-link\\\" > Edges</a></li>\\n    <li> <a  routerLink=\\\"/list-traffice\\\"class=\\\"nav-link\\\" > Traffice</a></li>\\n    <li> <a  routerLink=\\\"/shortest\\\"class=\\\"nav-link\\\" > Shortest Path</a></li>\\n  </ul>\\n   \\n    <!-- <li><a *ngIf=\\\"hardcodedAuthenticationService.isUserLoggedIn()\\\" routerLink=\\\"/welcome/sharad\\\" class=\\\"nav-link\\\">Home</a></li>\\n    <li><a *ngIf=\\\"hardcodedAuthenticationService.isUserLoggedIn()\\\" routerLink=\\\"/todos\\\" class=\\\"nav-link\\\">Todos</a></li>\\n  \\n    <li><a *ngIf=\\\"hardcodedAuthenticationService.isUserLoggedIn()\\\" routerLink=\\\"/users\\\" class=\\\"nav-link\\\">Users</a></li>\\n    \\n  </ul>\\n  \\n  <ul class=\\\"navbar-nav navbar-collapse justify-content-end\\\">\\n   \\n    <li><a *ngIf=\\\"!hardcodedAuthenticationService.isUserLoggedIn()\\\" routerLink=\\\"/login\\\" class=\\\"nav-link\\\">Login</a></li>\\n    <li><a *ngIf=\\\"hardcodedAuthenticationService.isUserLoggedIn()\\\" routerLink=\\\"/logout\\\" class=\\\"nav-link\\\">Logout</a></li>\\n  </ul> -->\\n  </nav>\\n  \\n  </header>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Edges } from 'src/app/list-edges/list-edges.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EdgesDataService {\n\n  constructor(private httpClient :HttpClient) { }\n\n  getAllEdges(){\n    console.log(\"getAllEdges\")\n    return this.httpClient.get<Edges[]>('http://localhost:8080/edges')\n  }\n  retrieveEdge(edgeId){\n    console.log(\"testing\"+edgeId)\n    return this.httpClient.get<Edges>(`http://localhost:8080/edges/${edgeId}`)\n  }\n  createEdge(edgeId,edge){\n    console.log(\"create\")\n    return this.httpClient.post( `http://localhost:8080/edges/create/`,edge)\n  }\n  updateEdge(edgeId,edge){\n    console.log(\"update\")\n    return this.httpClient.put( `http://localhost:8080/edges/update/${edgeId}`,edge)\n  }\n  deleteEdge(edgeId){\n    console.log(\"delete\")\n    return this.httpClient.delete(`http://localhost:8080/edges/${edgeId}`)\n  }\n\n  \n  \n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nexport class ShortestPath {\n  constructor(public message:string){ }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShortestpathService {\n\n  constructor(private httpClient :HttpClient) { }\n\n  \n  getShortestPath(sourceValue,destinationValue){\n    console.log(\"sourceValue :\"+sourceValue)\n    console.log(\"destinationValue :\"+destinationValue)\n    return this.httpClient.get<ShortestPath>(`http://localhost:8080/shortest/from/${sourceValue}/to/${destinationValue}`)\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Traffic } from 'src/app/list-traffic/list-traffic.component';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TrafficDataService {\n\n  constructor(private httpClient :HttpClient) { }\n\n\n  getAllTraffic(){\n    console.log(\"getAllTraffic\")\n    return this.httpClient.get<Traffic[]>('http://localhost:8080/traffics')\n  }\n\n  retrieveTraffic(routeId){\n    console.log(\"testing\"+routeId)\n    return this.httpClient.get<Traffic>(`http://localhost:8080/traffics/${routeId}`)\n  }\n\n\n  createTraffic(routeId,traffic){\n    console.log(\"create\")\n    return this.httpClient.post( `http://localhost:8080/traffics/create/`,traffic)\n  }\n  updateTraffic(routeId,traffic){\n    console.log(\"update\")\n    return this.httpClient.put( `http://localhost:8080/traffics/update/${routeId}`,traffic)\n  }\n  deleteTraffice(routeId){\n    console.log(\"delete\")\n    return this.httpClient.delete(`http://localhost:8080/traffic/${routeId}`)\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Vertice } from 'src/app/list-vertice/list-vertice.component';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VerticeDataService {\n\n  constructor(private httpClient :HttpClient) { }\n\n  \n  getAllVertice(){\n    console.log(\"getAllVertice\")\n    return this.httpClient.get<Vertice[]>('http://localhost:8080/vertices')\n  }\n\n  retrieveVertice(id){\n    console.log(\"testing :\"+id)\n    return this.httpClient.get<Vertice>(`http://localhost:8080/vertices/${id}`)\n  }\n\n  createVertice(id,vertice){\n    console.log(\"create\")\n    return this.httpClient.post( `http://localhost:8080/vertices/create/`,vertice)\n  }\n\n  updateVertice(id,vertice){\n    console.log(\"update\")\n    return this.httpClient.put( `http://localhost:8080/vertices/update/${id}`,vertice)\n  }\n\n  deleteVertice(id){\n    console.log(\"delete\")\n    return this.httpClient.delete(`http://localhost:8080/vertices/${id}`)\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Nob3J0ZXN0L3Nob3J0ZXN0LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<h3>Find the shortest path from the source to a destination</h3>\\n<div class=\\\"container\\\">\\n    <!-- <form #pathForm=\\\"ngForm\\\"  (ngSubmit)=\\\"!pathForm.invalid && getPath()\\\"> -->\\n        <fieldset class=\\\"form-group\\\">\\n            <label> Source</label>\\n            <select name =\\\"source\\\" [(ngModel)]=\\\"sourceValue\\\">\\n                <option *ngFor=\\\"let vertice of vertices\\\" [(ngValue)]=\\\"vertice.verticeId\\\">{{vertice.verticeName}}</option>\\n            </select>\\n            \\n            </fieldset>\\n            <fieldset class=\\\"form-group\\\">\\n                <label> Destination</label>\\n                <select name =\\\"destination\\\" [(ngModel)]=\\\"destinationValue\\\">\\n                    <option *ngFor=\\\"let vertice of vertices\\\" [(ngValue)]=\\\"vertice.verticeId\\\">{{vertice.verticeName}}</option>\\n                </select>\\n                \\n                </fieldset>\\n\\n                  <!-- <button type=\\\"submit\\\" class =\\\"btn btn-success\\\" >Get Path</button> -->\\n                  <button (click)=\\\"getPath(sourceValue,destinationValue)\\\" class=\\\"btn btn-success\\\">Get Shortest Path</button>\\n      <!-- </form> -->\\n      <div  class=\\\"container\\\">\\n         <h4> Here is Path from {{sourceValue}} To {{destinationValue}} :</h4> <br><h5>{{messagePath}}</h5>\\n      </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Vertice } from '../list-vertice/list-vertice.component';\nimport { VerticeDataService } from '../service/data/vertice-data.service';\nimport { Router } from '@angular/router';\nimport { ShortestpathService, ShortestPath } from '../service/data/shortestpath.service';\n\n\n\n@Component({\n  selector: 'app-shortest',\n  templateUrl: './shortest.component.html',\n  styleUrls: ['./shortest.component.css']\n})\nexport class ShortestComponent implements OnInit {\n\n  vertices:Vertice[]\n  messagePath:string\n  constructor(private router:Router,private verticeService:VerticeDataService,\n    private shortestDataService:ShortestpathService) { }\n\n  ngOnInit() {\n    this.getAllVertice()\n  }\n\n  getAllVertice(){\n    this.verticeService.getAllVertice().subscribe(\n      response=>{\n        console.log(response)\n        this.vertices=response\n      }\n    )\n  }\n  getPath(sourceValue,destinationValue){\n    console.log(\"Get Path from here:\"+sourceValue)\n    console.log(\"Get Path to here:\"+destinationValue)\n    this.shortestDataService.getShortestPath(sourceValue,destinationValue).subscribe(\n      response=>{\n        console.log(response)\n        this.messagePath=response.message\n      }\n    )\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Nob3J0ZXN0cGF0aC9zaG9ydGVzdHBhdGguY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<p>\\n  shortestpath works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-shortestpath',\n  templateUrl: './shortestpath.component.html',\n  styleUrls: ['./shortestpath.component.css']\n})\nexport class ShortestpathComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3RyYWZmaWMvdHJhZmZpYy5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h1>Traffic</h1>\\n<div class=\\\"container\\\">\\n<form #trafficForm=\\\"ngForm\\\"  (ngSubmit)=\\\"!trafficForm.invalid && saveTraffic()\\\">\\n<fieldset class=\\\"form-group\\\">\\n<label> Source</label>\\n<input type =\\\"text\\\" class=\\\"form-control\\\" \\n     name=\\\"source\\\" \\n     #source =\\\"ngModel\\\"\\n     required=\\\"required\\\" [(ngModel)]=\\\"traffic.source\\\">\\n</fieldset>\\n\\n<fieldset class=\\\"form-group\\\">\\n    <label> Destination</label>\\n    <input type =\\\"text\\\" class=\\\"form-control\\\" \\n         name=\\\"destination\\\" \\n         #destination =\\\"ngModel\\\"\\n         required=\\\"required\\\" [(ngModel)]=\\\"traffic.destination\\\">\\n    </fieldset>\\n\\n    <fieldset class=\\\"form-group\\\">\\n        <label> Time Delay</label>\\n        <input type =\\\"text\\\" class=\\\"form-control\\\" \\n             name=\\\"timeDelay\\\" \\n             #timeDelay =\\\"ngModel\\\"\\n             required=\\\"required\\\" [(ngModel)]=\\\"traffic.timeDelay\\\">\\n        </fieldset>\\n        <fieldset class=\\\"form-group\\\">\\n            <label> UpdateBy</label>\\n            <input type =\\\"text\\\" class=\\\"form-control\\\" \\n                 name=\\\"updateBy\\\" \\n                 #updateBy =\\\"ngModel\\\"\\n                 required=\\\"required\\\" [(ngModel)]=\\\"traffic.updateBy\\\">\\n            </fieldset>\\n\\n            <fieldset class=\\\"form-group\\\">\\n                <label> UpdateTimestamp</label>\\n                <input type =\\\"date\\\" class=\\\"form-control\\\" \\n                     name=\\\"updateTimestamp\\\" \\n                     #updateTimestamp =\\\"ngModel\\\"\\n                     required=\\\"required\\\" [(ngModel)]=\\\"traffic.updateTimestamp\\\">\\n                </fieldset>\\n    <button type=\\\"submit\\\" class =\\\"btn btn-success\\\" >Save</button>\\n</form>\\n\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Traffic } from '../list-traffic/list-traffic.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TrafficDataService } from '../service/data/traffic-data.service';\n@Component({\n  selector: 'app-traffic',\n  templateUrl: './traffic.component.html',\n  styleUrls: ['./traffic.component.css']\n})\nexport class TrafficComponent implements OnInit {\n\n  routeId:number\n  traffic:Traffic\n  constructor(private  route:ActivatedRoute,private router:Router,\n   private trafficService:TrafficDataService ) { }\n\n  ngOnInit() {\n    console.log(\"CAlling update :\"+this.routeId)\n    this.routeId =this.route.snapshot.params['routeId']\n    this.traffic= new Traffic(0,\"t\",\"t\",2,\"dummy\",new Date())\n    if(this.routeId!=-1){\n      console.log(\"CAlling update :\"+this.routeId)\n      this.routeId =this.route.snapshot.params['routeId']\n      this.trafficService.retrieveTraffic(this.routeId).subscribe(\n      data =>this.traffic=data\n    )\n    }\n  }\n  saveTraffic(){\n\n    \n\n    if(this.routeId!=-1){\n      console.log(\"Call to update data:\"+this.routeId)\n      console.log(\"Call to save data-updateTraffic\")\n    //  this.edgeId =this.route.snapshot.params['edgeId']\n    this.trafficService.updateTraffic(this.routeId,this.traffic).subscribe(\n      data => console.log(data)\n         )\n         this.router.navigate(['list-traffice'])\n\n    }\n  else{\n      console.log(\"Call to create data:\"+this.routeId)\n      console.log(\"Call to save data-createTraffic\")\n      \n      this.trafficService.createTraffic(this.routeId,this.traffic).subscribe(\n        data => console.log(data)\n          \n            )\n            this.router.navigate(['list-traffice'])\n  \n    }\n    \n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZlcnRpY2UvdmVydGljZS5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h1>Vertice Form</h1>\\n<div class=\\\"container\\\">\\n<form #verticeForm=\\\"ngForm\\\"  (ngSubmit)=\\\"!verticeForm.invalid && saveVertice()\\\">\\n<fieldset class=\\\"form-group\\\">\\n<label> Vertice Id</label>\\n\\n<input type =\\\"text\\\" class=\\\"form-control\\\" \\n     name=\\\"verticeId\\\" \\n     #verticeId =\\\"ngModel\\\"\\n     required=\\\"required\\\" [(ngModel)]=\\\"vertice.verticeId\\\">\\n\\n</fieldset>\\n\\n<fieldset class=\\\"form-group\\\">\\n    <label> Vertice Name</label>\\n    <input type =\\\"text\\\" class=\\\"form-control\\\" \\n    name=\\\"verticeName\\\" \\n    #verticeName =\\\"ngModel\\\"\\n    required=\\\"required\\\" [(ngModel)]=\\\"vertice.verticeName\\\">\\n    </fieldset>\\n        <fieldset class=\\\"form-group\\\">\\n            <label> UpdateBy</label>\\n            <input type =\\\"text\\\" class=\\\"form-control\\\" \\n                 name=\\\"updateBy\\\" \\n                 #updateBy =\\\"ngModel\\\"\\n                 required=\\\"required\\\" [(ngModel)]=\\\"vertice.updateBy\\\">\\n            </fieldset>\\n\\n            <fieldset class=\\\"form-group\\\">\\n                <label> Update Date</label>\\n                <input type =\\\"date\\\" class=\\\"form-control\\\" \\n                     name=\\\"updateDate\\\" \\n                     #updateDate =\\\"ngModel\\\"\\n                     required=\\\"required\\\" [(ngModel)]=\\\"vertice.updateDate\\\">\\n                </fieldset>\\n    <button type=\\\"submit\\\" class =\\\"btn btn-success\\\" >Save</button>\\n</form>\\n\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Vertice } from '../list-vertice/list-vertice.component';\nimport { VerticeDataService } from '../service/data/vertice-data.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-vertice',\n  templateUrl: './vertice.component.html',\n  styleUrls: ['./vertice.component.css']\n})\nexport class VerticeComponent implements OnInit {\n\n  id:number\n  vertice:Vertice\n  constructor(private  route:ActivatedRoute,private router:Router,\n    private verticeService :VerticeDataService) { }\n\n  ngOnInit() {\n    this.id =this.route.snapshot.params['id']\n    this.vertice= new Vertice(0,\"\",\"\",\"\",new Date())\n    if(this.id!=-1){\n      console.log(\"CAlling update\")\n      this.id =this.route.snapshot.params['id']\n      this.verticeService.retrieveVertice(this.id).subscribe(\n      data =>this.vertice=data\n    )\n    }\n  }\n\n  saveVertice(){\n    if(this.id!=-1){\n      console.log(\"Call to update data:\"+this.id)\n      console.log(\"Call to save data-updateTraffic\")\n    //  this.edgeId =this.route.snapshot.params['edgeId']\n    this.verticeService.updateVertice(this.id,this.vertice).subscribe(\n      data => console.log(data)\n         )\n         this.router.navigate(['list-vertice'])\n\n    }\n  else{\n      console.log(\"Call to create data:\"+this.id)\n      console.log(\"Call to save data-createTraffic\")\n      \n      this.verticeService.createVertice(this.id,this.vertice).subscribe(\n        data => console.log(data)\n            )\n            this.router.navigate(['list-vertice'])\n  \n    }\n    \n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3dlbGNvbWUvd2VsY29tZS5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h1>Welcome !!</h1>\\n<div class =\\\"container\\\">\\nWelcome {{name}}. Welcome to InterWeb Application!<br>\\nYou can manage your edges <a routerLink=\\\"/edges\\\"> here </a>\\n</div>\\n<div class=\\\"container\\\">\\n\\n  Click here to get customize Welcome Message:\\n\\n  <button (click) =\\\"getWelcomeMessage()\\\" class=\\\"btn btn-success\\\"> Get WelCome Message </button>\\n</div>\\n\\n<div class=\\\"container\\\">\\n<h2>Your customized Welcome Messsage</h2>\\n{{welcomemessagefromservice}}\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-welcome',\n  templateUrl: './welcome.component.html',\n  styleUrls: ['./welcome.component.css']\n})\nexport class WelcomeComponent implements OnInit {\n  message = 'Welcome Page for InterWeb'\n  name ='Sharad'\n  welcomemessagefromservice\n \n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  getWelcomeMessage(){\n    this.welcomemessagefromservice =\"Testing Application\"\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}